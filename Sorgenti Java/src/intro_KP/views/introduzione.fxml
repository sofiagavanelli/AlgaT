<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="720.0" prefWidth="1080.0" styleClass="anchorp" stylesheets="@../../stylesheets/application.css" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="intro_KP.views.introController">
   <children>
      <VBox prefHeight="543.0" prefWidth="985.0">
         <children>
            <Label styleClass="titoli" stylesheets="@../../stylesheets/application.css" text="INTRODUZIONE" textFill="WHITE">
               <VBox.margin>
                  <Insets left="90.0" top="70.0" />
               </VBox.margin>
            </Label>
            <Text fill="#f5f0f0" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="testi" text="I due algoritmi seguenti trattano il problema degli alberi di copertura di peso minimo.&#10;&#10;Problema: dato un grafo pesato, determinare come interconnettere tutti i suoi nodi minimizzando il costo del peso associato ai suoi archi." wrappingWidth="775.0390625">
               <VBox.margin>
                  <Insets left="90.0" top="25.0" />
               </VBox.margin>
            </Text>
            <Label styleClass="testi" text="ALBERO DI COPERTURA" textFill="WHITE">
               <VBox.margin>
                  <Insets left="90.0" top="20.0" />
               </VBox.margin>
            </Label>
            <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="testi" text="Dato un grafo G = (V, E) non orientato e connesso, un albero dicopertura di G è un sottografo G' = (V, T ) tale che&#10;   &gt; G' è un albero&#10;   &gt; T ⊆ E  &#10;   &gt; G' contiene tutti i vertici di G">
               <VBox.margin>
                  <Insets left="90.0" top="20.0" />
               </VBox.margin>
            </Text>
            <Text fill="#f27e7e" strokeType="OUTSIDE" strokeWidth="0.0" text="Gli algoritmi di Kruskal e Prim sono due algoritmi di tipo greedy, che si propongono di risolvere tale problema accrescendo un sottoinsieme A di archi in modo tale che A sia  sempre un sottoinsieme di qualche albero di connessione minimo " wrappingWidth="896.1448974609375">
               <VBox.margin>
                  <Insets left="90.0" top="20.0" />
               </VBox.margin>
               <font>
                  <Font name="Segoe UI" size="18.0" />
               </font>
            </Text>
            <Label styleClass="testi" text="ARCO SICURO" textFill="WHITE">
               <VBox.margin>
                  <Insets left="90.0" top="30.0" />
               </VBox.margin>
            </Label>
            <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="testi" text="Un arco [u, v] è detto sicuro per A se A ∪ {[u, v]} è ancora un sottoinsieme di qualche albero di connessione minimo.">
               <VBox.margin>
                  <Insets left="90.0" top="20.0" />
               </VBox.margin>
            </Text>
            <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="testi" text="Non è detto che l'albero di copertura minimo per un grafo sia univoco.">
               <VBox.margin>
                  <Insets left="90.0" top="20.0" />
               </VBox.margin>
            </Text>
         </children>
      </VBox>
      <Button fx:id="menu" layoutX="50.0" layoutY="660.0" mnemonicParsing="false" onAction="#gotoMenu" styleClass="buttonlez" stylesheets="@../../stylesheets/application.css" text="MENU" AnchorPane.bottomAnchor="30.0" AnchorPane.leftAnchor="45.0" />
      <Button fx:id="next" layoutX="985.0" layoutY="660.0" mnemonicParsing="false" onAction="#goNext" styleClass="buttonlez" stylesheets="@../../stylesheets/application.css" text="&gt;&gt;" AnchorPane.bottomAnchor="30.0" AnchorPane.rightAnchor="45.0" />
   </children>
</AnchorPane>
